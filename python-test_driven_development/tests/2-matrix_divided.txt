>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

no divisor argument is passed:
    >>> matrix_divided([[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

3 by 3 matrix:
    >>> matrix_divided([[3, 6, 9], [1, 2, 3], [4, 8, 12]], 2)
    [[1.5, 3.0, 4.5], [0.5, 1.0, 1.5], [2.0, 4.0, 6.0]]

floating divider:
    >>> matrix_divided([[10, 20], [30, 40]], 1.5)
    [[6.67, 13.33], [20.0, 26.67]]

empty matrix:
    >>> matrix_divided([], 2)
    []

non-rectangular matrix:
    >>> matrix = [1, 2, 3], [4, 5], [6, 7, 8, 9]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

division by zero:
    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

non-numeric matrix element:
    >>> matrix_divided([[1, 2], [3, "4"]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix with a single number:
    >>> matrix_divided([[10]], 5)
    [[2.0]]

negative divisor:
    >>> matrix_divided([[1, 2], [3, 4]], -5)
    [[-0.2, -0.4], [-0.6, -0.8]]

no arguments:
    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

positive infinite divisor:
    >>> matrix_divided([[3, 4], [8, 9]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

matrix with positive infinite element:
    >>> matrix_divided([[3, 4], [8, float('inf')]], 2)
    [[1.5, 2.0], [4.0, inf]]